// Generated by CoffeeScript 1.6.2
(function() {
  var _ref, _ref1,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  this.CeleryManager = this.CeleryManager || {};

  this.CeleryManager.config = this.CeleryManager.config || {};

  this.CeleryManager.classes = this.CeleryManager.classes || {};

  CeleryManager.HomeView = (function(_super) {
    __extends(HomeView, _super);

    function HomeView() {
      this.render = __bind(this.render, this);
      this.test = __bind(this.test, this);
      this.error = __bind(this.error, this);
      this.success = __bind(this.success, this);
      this.initialize = __bind(this.initialize, this);      _ref = HomeView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    HomeView.prototype.events = {
      "click .test-button": "test"
    };

    HomeView.prototype.initialize = function() {
      this.template = _.template($("#home-view-template").text());
      return this.render();
    };

    HomeView.prototype.success = function(fieldset, message) {
      alert(message);
      return fieldset.parents(".panel").removeClass("panel-danger").addClass("panel-success");
    };

    HomeView.prototype.error = function(fieldset, message) {
      alert(message);
      return fieldset.parents(".panel").removeClass("panel-success").addClass("panel-danger");
    };

    HomeView.prototype.test = function(e) {
      var fieldset,
        _this = this;

      fieldset = $(e.target).parents("fieldset");
      $.ajax({
        url: fieldset.data("test-url"),
        type: 'post',
        data: fieldset.serialize(),
        success: function(data, textStatus, jqXHR) {
          if (data.status === "error") {
            return _this.error(fieldset, data.message);
          } else {
            return _this.success(fieldset, "Passed test!");
          }
        },
        beforeSend: function() {
          return fieldset.block({
            message: null,
            css: {
              opacity: 0
            }
          }).spin();
        },
        complete: function() {
          return fieldset.unblock().spin(false);
        }
      });
      return false;
    };

    HomeView.prototype.render = function() {
      this.$el.append(this.template());
      jQuery.validator.addMethod("domainOrIpv4", function(value, element, param) {
        var ec2regex, ipv4regex;

        ipv4regex = /^(25[0-5]|2[0-4]\d|[01]?\d\d?)\.(25[0-5]|2[0-4]\d|[01]?\d\d?)\.(25[0-5]|2[0-4]\d|[01]?\d\d?)\.(25[0-5]|2[0-4]\d|[01]?\d\d?)$/i;
        ec2regex = /^ec2-(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)-(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)-(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)-(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.compute-1\.amazonaws\.com$/i;
        return this.optional(element) || ec2regex.test(value) || ipv4regex.test(value);
      }, "Please enter a valid IPv4 or domain name of EC2 instance.");
      return this.$("form").validate({
        rules: {
          host: {
            required: true,
            domainOrIpv4: true
          },
          user: {
            required: true
          },
          password: {
            required: false
          }
        }
      });
    };

    return HomeView;

  })(Backbone.View);

  CeleryManager.Router = (function(_super) {
    __extends(Router, _super);

    function Router() {
      this.home = __bind(this.home, this);
      this.initialize = __bind(this.initialize, this);      _ref1 = Router.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    Router.prototype.routes = {
      "": "home"
    };

    Router.prototype.initialize = function() {
      jQuery.validator.setDefaults({
        errorPlacement: function(error, element) {
          if (element.parent().hasClass('input-prepend') || element.parent().hasClass('input-append')) {
            return error.insertAfter(element.parent());
          } else {
            return error.insertAfter(element);
          }
        },
        errorElement: "small",
        wrapper: "div",
        highlight: function(element) {
          return $(element).closest('.form-group').addClass('has-error');
        },
        success: function(element) {
          return $(element).closest('.form-group').removeClass('has-error');
        }
      });
      return CeleryManager.config.urlRoot = window.location.href.split("?")[0];
    };

    Router.prototype.home = function() {
      return this.currentView = new CeleryManager.HomeView({
        el: $("#startup-view")
      });
    };

    return Router;

  })(Backbone.Router);

  $(function() {
    CeleryManager.app = new CeleryManager.Router();
    return Backbone.history.start();
  });

}).call(this);
